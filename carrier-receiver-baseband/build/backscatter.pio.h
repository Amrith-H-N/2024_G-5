// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----------- //
// backscatter //
// ----------- //

#define backscatter_wrap_target 0
#define backscatter_wrap 19

static const uint16_t backscatter_program_instructions[] = {
            //     .wrap_target
    0xf801, //  0: set    pins, 1         side 1     
    0x60c0, //  1: out    isr, 32                    
    0x6040, //  2: out    y, 32                      
    0x6021, //  3: out    x, 1                       
    0x002c, //  4: jmp    !x, 12                     
    0xa022, //  5: mov    x, y                       
    0xff01, //  6: set    pins, 1         side 1 [7] 
    0xf801, //  7: set    pins, 1         side 1     
    0xf700, //  8: set    pins, 0         side 0 [7] 
    0x0046, //  9: jmp    x--, 6                     
    0xfb01, // 10: set    pins, 1         side 1 [3] 
    0x0003, // 11: jmp    3                          
    0xa026, // 12: mov    x, isr                     
    0xff01, // 13: set    pins, 1         side 1 [7] 
    0xf901, // 14: set    pins, 1         side 1 [1] 
    0xf700, // 15: set    pins, 0         side 0 [7] 
    0xf000, // 16: set    pins, 0         side 0     
    0x004d, // 17: jmp    x--, 13                    
    0xfd01, // 18: set    pins, 1         side 1 [5] 
    0x0003, // 19: jmp    3                          
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program backscatter_program = {
    .instructions = backscatter_program_instructions,
    .length = 20,
    .origin = -1,
};

static inline pio_sm_config backscatter_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + backscatter_wrap_target, offset + backscatter_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

#include "pico/stdlib.h"
#include "hardware/clocks.h"
#define min(x, y) (((x) < (y)) ? (x) : (y))
#define BAUDRATE 100000
static inline void backscatter_program_init(PIO pio, uint sm, uint offset, uint pin1, uint pin2){
   pio_gpio_init(pio, pin1);
   pio_sm_set_consecutive_pindirs(pio, sm, pin1, 1, true);
   pio_gpio_init(pio, pin2);
   pio_sm_set_consecutive_pindirs(pio, sm, pin2, 1, true);
   pio_sm_config c = backscatter_program_get_default_config(offset);
   sm_config_set_set_pins(&c, pin1, 1);
   sm_config_set_sideset_pins(&c, pin2);
   sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX); // We only need TX, so get an 8-deep FIFO (join RX and TX FIFO)
   sm_config_set_out_shift(&c, false, true, 32);  // OUT shifts to left (MSB first), autopull after every 32 bit
   pio_sm_init(pio, sm, offset, &c);
   pio_sm_set_enabled(pio, sm, true);
   pio_sm_put_blocking(pio, sm, 62); // floor((b - w) / d0) = floor((1250 - 4)/20) 
   pio_sm_put_blocking(pio, sm, 69); // floor((b - w) / d1) = floor((1250 - 4)/18) 
}
static inline void backscatter_send(PIO pio, uint sm, uint32_t *message, uint32_t len) {
    for(uint32_t i = 0; i < len; i++){
        pio_sm_put_blocking(pio, sm, message[i]); // set pin back to low
    }
    sleep_ms(1); // wait for transmission to finish
}

#endif

