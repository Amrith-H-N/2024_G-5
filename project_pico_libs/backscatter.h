// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

#include <stdio.h>
#include <math.h>
#include <string.h>
#include "pico/stdlib.h"
#include "hardware/clocks.h"

#define CLKFREQ 125
#ifndef MINMAX
#define MINMAX
#define max(x, y) (((x) > (y)) ? (x) : (y))
#define min(x, y) (((x) < (y)) ? (x) : (y))
#endif
#define abs(x) (((x) > (0)) ? (x) : (-x))

#ifndef PIO_BACKSCATTER
#define PIO_BACKSCATTER
struct backscatter_config {
  uint32_t baudrate;
  uint32_t center_offset;
  uint32_t deviation;
  uint32_t minRxBw;
};
#endif

// ----------- //
// backscatter //
// ----------- //

// how many instructions are needed to create this delay?
uint8_t instructionCount(uint8_t delay);

// repeat the instruction until the desired delay has past
int16_t repeat(uint16_t* instructionBuffer, uint16_t delay, uint32_t asm_instr, uint8_t *length);

bool generatePIOprogram(uint16_t d0,uint16_t d1, uint32_t baud, uint16_t* instructionBuffer, struct pio_program *backscatter_program);

/* based on d0/d1/baud, the modulation parameters will be computed and returned in the struct backscatter_config */
void backscatter_program_init(PIO pio, uint sm, uint pin1, uint pin2, uint16_t d0, uint16_t d1, uint32_t baud, struct backscatter_config *config, uint16_t *instructionBuffer);

void backscatter_send(PIO pio, uint sm, uint32_t *message, uint32_t len);
